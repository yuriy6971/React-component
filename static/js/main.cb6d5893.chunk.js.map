{"version":3,"sources":["logo.svg","Comp1.jsx","App.js","reportWebVitals.js","index.js"],"names":["Comp1","props","addCount","currentCount","state","count","setState","addComment","comment","myRef","current","value","comments","commentsUser","push","React","createRef","this","type","onClick","ref","map","item","index","toString","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAAe,I,wCCyDAA,E,kDArDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAQVC,SAAW,WACP,IAAIC,EAAe,EAAKC,MAAMC,MAC9BF,IACA,EAAKG,SAAS,CACVD,MAAQF,KAbE,EAmBlBI,WAAa,WACZ,IAAIC,EAAU,EAAKC,MAAMC,QAAQC,MAC3BC,EAAW,EAAKR,MAAMS,aAC5BD,EAASE,KAAKN,GACd,EAAKF,SAAS,CACVO,aAAeD,IAEpB,EAAKH,MAAMC,QAAQC,MAAQ,IAxBvB,EAAKP,MAAQ,CACTC,MAAQ,EACRQ,aAAc,IAElB,EAAKJ,MAAQM,IAAMC,YANL,E,0CA8BlB,WACI,OACI,gCACI,uCACA,8BAAMC,KAAKb,MAAMC,QACjB,wBAAQa,KAAO,SAASC,QAAWF,KAAKf,SAAxC,uBACA,0CACA,0BAAUkB,IAAOH,KAAKR,QACtB,wBAAQS,KAAM,SAASC,QAAWF,KAAKV,WAAvC,0BACA,mCAAMU,KAAKb,MAAMS,aAAaQ,KAAI,SAACC,EAAKC,GACpC,OAAO,6BAA8BD,GAAnBC,EAAMC,eAD5B,c,GAzCIT,IAAMU,WCUXC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACD,cAAC,EAAD,OCKYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cb6d5893.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\n\r\nclass Comp1 extends React.Component {\r\n  \r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count : 0,\r\n            commentsUser :[]\r\n        }\r\n        this.myRef = React.createRef()\r\n    }\r\n\r\n    addCount = () => {\r\n        let currentCount = this.state.count;\r\n        currentCount++;\r\n        this.setState({\r\n            count : currentCount\r\n            \r\n        })\r\n            \r\n    }\r\n    \r\n    addComment = () => {\r\n     let comment = this.myRef.current.value;\r\n     const comments = this.state.commentsUser;\r\n     comments.push(comment)\r\n     this.setState({\r\n         commentsUser : comments\r\n     })\r\n    this.myRef.current.value = \"\"\r\n    \r\n    }\r\n\r\n    render(){\r\n        return(   \r\n            <div>\r\n                <h1>State</h1>\r\n                <div>{this.state.count}</div>\r\n                <button type = \"button\" onClick = {this.addCount}>Add Count</button>\r\n                <h1>Comments</h1>\r\n                <textarea ref = {this.myRef}></textarea>\r\n                <button type= \"button\" onClick = {this.addComment} > Add Comment</button>\r\n                <ul> {this.state.commentsUser.map((item,index) => {\r\n                    return <li key = {index.toString()}>{item}</li>\r\n                })\r\n                     \r\n    \r\n                    \r\n                } </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default Comp1","import logo from './logo.svg';\nimport './App.css';\nimport Comp1 from './Comp1';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n   <Comp1/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}